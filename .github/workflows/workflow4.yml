name: Workflow 4

on:
  workflow_dispatch:
  # schedule:
   #  - cron: '0 2 * * *'

  #push:
  #  paths:
  #    - src/**
  #    - pom.xml
  #  branches:
  #    - main

permissions:
    id-token: write
    contents: read

jobs:
  multibrowser:
    name: Web System Test on ${{ matrix.browser }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        browser: [chrome, firefox, edge, safari]
        exclude:
          - os: ubuntu-latest
            browser: edge
          - os: ubuntu-latest
            browser: safari
          - os: windows-latest
            browser: safari
          - os: macos-latest
            browser: edge

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Run Web Systems Tests on ${{ matrix.browser }}
        run: mvn test -Dtest=SeleniumInterfaceTest -Dbrowser=${{ matrix.browser }}

  loadtesting:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: multibrowser
    steps:
      - uses: actions/checkout@v4

      # 1. Ejecutar todos los tests (excepto SmokeTest y Prueba de sistema)
      - name: Run Integration Test
        run: mvn test -Dtest=FilmServiceIntegrationTest

      - name: Run API Test
        run: mvn test -Dtest=APIRestTest

      - name: Run Unit Tests
        run: mvn test -Dtest=FilmServiceTest

      - name: Generate tag
        run: echo "DOCKER_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        id: project
        
      # 2. Generar imagen Docker
      - name: Build Docker image
        run: mvn spring-boot:build-image -DskipTests -Dspring-boot.build-image.imageName=${{ secrets.DOCKERHUB_USERNAME }}/nitflex-staging:${{ steps.project.outputs.tag }}

      # 3. Iniciar sesión en DockerHub
      - name: Login to DockerHub
        run: docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}" 

      # 4. Publicar la imagen
      - name: Push Docker image to DockerHub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/nitflex-staging:${{ steps.project.outputs.tag }}

        # 5. Desplegar la imagen en Azure Container Instance (ACI)
      - name: Deploy to Azure
        uses: azure/login@v2
        with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Run az commands to deploy container
        run: |
            az container create \
                --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
                --name nitflex-staging \
                --image ${{ secrets.DOCKERHUB_USERNAME }}/nitflex-staging:${{ steps.project.outputs.tag }} \
                --registry-login-server index.docker.io \
                --registry-username ${{ secrets.DOCKERHUB_USERNAME }} \
                --registry-password ${{ secrets.DOCKERHUB_READ_TOKEN }} \
                --dns-name-label nitflex-staging-${{ secrets.DOCKERHUB_USERNAME }} \
                --ports 8080 \
                --os-type Linux \
                --cpu 1 \
                --memory 1.5

        # 6. Ejecutar el Smoke Test sobre la aplicación desplegada
      - name: Run Smoke Test with Artillery
        uses: artilleryio/action-cli@v1
        with:
            command: run src/test/java/es/codeurjc/web/nitflex/smoke-test.yml

        # 7. Ejecutar prueba de carga de Artillery
      - name: Run Load Test with Artillery
        uses: artilleryio/action-cli@v1
        with:
            command: run load-test.yml
